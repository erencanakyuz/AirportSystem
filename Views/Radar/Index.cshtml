@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8">
    <title>İstanbul Havalimanı Uçuş Radarı</title>
    <!-- Bootstrap (optional) + Leaflet CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

    <style>
        /* Basic full-page styling */
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            font-family: 'Arial', sans-serif;
            background-color: #121212;
            color: #e0e0e0;
        }

        body {
            overflow: hidden; /* no scrollbars, map covers entire page */
        }

        /* Leaflet map container */
        #mapContainer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        /* Canvas radar overlay on top of map */
        #radarCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            pointer-events: none; /* allow clicks to pass to map */
        }

        /* Loading indicator (top-left corner) */
        #loadingIndicator {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            z-index: 3;
        }

        /* Flight details panel (top-right corner) */
        .flight-details-panel {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 5px;
            z-index: 3;
            width: 300px;
            max-height: 80%;
            overflow-y: auto;
        }

            .flight-details-panel h4 {
                margin-top: 0;
                color: #00bcd4;
            }

            .flight-details-panel p {
                margin-bottom: 8px;
                line-height: 1.4;
            }

        /* Smooth opacity transitions on markers */
        .leaflet-marker-icon {
            transition: opacity 0.15s ease-out;
        }
    </style>
</head>
<body>
    <!-- MAP container -->
    <div id="mapContainer"></div>

    <!-- RADAR Canvas -->
    <canvas id="radarCanvas"></canvas>

    <!-- LOADING indicator -->
    <div id="loadingIndicator">Veri Yükleniyor...</div>

    <!-- FLIGHT DETAILS panel -->
    <div id="flightDetails" class="flight-details-panel" style="display:none;"></div>

    <!-- Leaflet + jQuery -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

    <script>
        /***************************************************/
        /** 1) RADAR (CANVAS) SETUP                      **/
        /***************************************************/
        const canvas = document.getElementById('radarCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let centerX = canvas.width / 2;
        let centerY = canvas.height / 2;
        let radarRadius = Math.min(centerX, centerY) * 0.8;
        let sweepAngle = 0;

        function onResize() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            centerX = canvas.width / 2;
            centerY = canvas.height / 2;
            radarRadius = Math.min(centerX, centerY) * 0.8;
        }
        window.addEventListener('resize', onResize);


        /***************************************************/
        /** 2) LEAFLET MAP SETUP                          **/
        /***************************************************/
        const istLat = 41.275; // Istanbul Airport approximate lat
        const istLon = 28.75;  // Istanbul Airport approximate lon

        // Create the map
        let map = L.map('mapContainer', {
            center: [istLat, istLon],
            zoom: 9,
            zoomControl: true,
            attributionControl: false,
            dragging: true,
            doubleClickZoom: true,
            scrollWheelZoom: true,
            touchZoom: true,
            boxZoom: true,
            keyboard: true,
        });

        // Put plane icons in a higher z-index pane
        map.createPane('planeIconsPane');
        map.getPane('planeIconsPane').style.zIndex = 650;

        // Dark tile layer
        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors &copy; CartoDB'
        }).addTo(map);

        // Keep references to markers and polylines
        let planeMarkers = {};       // { icao24: LeafletMarker }
        let flightPaths = {};        // { icao24: array of [lat, lng] }
        let flightPathLayers = {};   // { icao24: LeafletPolyline }
        let selectedFlightIcao = null;

        // UI references
        const loadingIndicator = document.getElementById('loadingIndicator');
        const flightDetailsPanel = document.getElementById('flightDetails');

        /***************************************************/
        /** 3) AJAX DATA FETCH (from RadarApiController)  **/
        /***************************************************/
        let flightData = null;
        let lastFetchTime = 0;
        let isFetchingData = false;
        const fetchInterval = 15000; // 15 seconds

        function getFlightData() {
            const now = Date.now();
            if (now - lastFetchTime < fetchInterval || isFetchingData) {
                console.log("Fetch interval not met or a request is in progress.");
                return;
            }
            lastFetchTime = now;
            isFetchingData = true;
            loadingIndicator.style.display = 'block';

            // Ajax to your server endpoint: /RadarApi/GetFlights
            $.ajax({
                url: '@Url.Action("GetFlights", "RadarApi")',
                method: 'GET',
                dataType: 'json'
            })
            .done(function(data) {
                isFetchingData = false;
                loadingIndicator.style.display = 'none';

                // Check if there's an error
                if (data.error) {
                    console.error("Server error:", data.error, data.details);
                    showErrorMsg("Sunucu hatası: " + data.error);
                    return;
                }

                // We expect { time: ..., states: [...] }
                if (!data.states) {
                    console.warn("Invalid data format from server:", data);
                    showErrorMsg("Geçersiz veri formatı. 'states' yok.");
                    return;
                }
                flightData = data.states;
                updateFlights();
            })
            .fail(function(jqXHR, textStatus, errorThrown) {
                isFetchingData = false;
                loadingIndicator.style.display = 'none';
                console.error("Failed to fetch flights:", textStatus, errorThrown);
                showErrorMsg("Veri alınamadı. HTTP Hata: " + jqXHR.status + " - " + errorThrown);
            });
        }

        function showErrorMsg(msg) {
            loadingIndicator.textContent = "Hata: " + msg;
            loadingIndicator.style.display = 'block';
            setTimeout(() => {
                loadingIndicator.style.display = 'none';
                loadingIndicator.textContent = "Veri Yükleniyor...";
            }, 5000);
        }


        /***************************************************/
        /** 4) UPDATE FLIGHTS (Markers + Paths)           **/
        /***************************************************/
        function updateFlights() {
            if (!flightData) return;

            let currentIcaos = {};

            flightData.forEach(flight => {
                // flight array per OpenSky doc
                // flight[0] = icao24
                // flight[1] = callsign
                // flight[2] = origin_country
                // flight[5] = longitude
                // flight[6] = latitude
                // flight[7] = baro_altitude
                // flight[10] = true_track
                let icao24 = flight[0];
                let callsign = flight[1] ? flight[1].trim() : "N/A";
                let originCountry = flight[2] || "Bilinmiyor";
                let longitude = flight[5];
                let latitude = flight[6];
                let altitude = flight[7] || 0;
                let heading = flight[10] || 0;

                currentIcaos[icao24] = true;

                // If null coords, skip
                if (longitude == null || latitude == null) return;

                // Update flight path
                if (!flightPaths[icao24]) {
                    flightPaths[icao24] = [];
                }
                flightPaths[icao24].push([latitude, longitude]);
                if (flightPaths[icao24].length > 50) {
                    flightPaths[icao24].shift();
                }

                // Update or create polyline
                if (flightPathLayers[icao24]) {
                    flightPathLayers[icao24].setLatLngs(flightPaths[icao24]);
                } else {
                    flightPathLayers[icao24] = L.polyline(flightPaths[icao24], {
                        color: 'yellow',
                        weight: 1,
                        opacity: 0.7
                    }).addTo(map);
                }

                // Update or create marker
                if (planeMarkers[icao24]) {
                    // Update existing
                    planeMarkers[icao24].setLatLng([latitude, longitude]);

                    // Update icon (rotate)
                    let icon = planeMarkers[icao24].options.icon;
                    icon.options.html = `
                        <img src="/images/plane-icon.png"
                             style="width:72px; height:72px; opacity:0.6;
                                    transform: rotate(${heading}deg);">
                    `;
                    planeMarkers[icao24].setIcon(icon);

                    // Rebind tooltip
                    planeMarkers[icao24]
                        .unbindTooltip()
                        .bindTooltip(
                            `<b>Uçuş: ${callsign}</b><br>Rakım: ${Math.round(altitude)}m`,
                            { permanent: false, direction: 'top', offset: [0, -10] }
                        );

                    // Rebind click
                    planeMarkers[icao24].off('click').on('click', () => showFlightDetails(icao24));
                } else {
                    // New marker
                    let planeIcon = L.divIcon({
                        className: 'plane-marker',
                        html: `
                            <img src="/images/plane-icon.png"
                                 style="width:72px; height:72px; opacity:0.6;
                                        transform: rotate(${heading}deg);">
                        `,
                        iconSize: [72, 72],
                        iconAnchor: [36, 36]
                    });

                    let marker = L.marker([latitude, longitude], { icon: planeIcon });
                    marker.bindTooltip(
                        `<b>Uçuş: ${callsign}</b><br>Rakım: ${Math.round(altitude)}m`,
                        { permanent: false, direction: 'top', offset: [0, -10] }
                    );
                    marker.addTo(map, 'planeIconsPane');
                    marker.on('click', () => showFlightDetails(icao24));

                    planeMarkers[icao24] = marker;
                }
            });

            // Remove old markers/paths
            Object.keys(planeMarkers).forEach(icao => {
                if (!currentIcaos[icao]) {
                    map.removeLayer(planeMarkers[icao]);
                    delete planeMarkers[icao];

                    if (flightPathLayers[icao]) {
                        map.removeLayer(flightPathLayers[icao]);
                        delete flightPathLayers[icao];
                    }
                    delete flightPaths[icao];

                    if (selectedFlightIcao === icao) {
                        hideFlightDetails();
                    }
                }
            });
        }


        /***************************************************/
        /** 5) SHOW/HIDE FLIGHT DETAILS                   **/
        /***************************************************/
        function showFlightDetails(icao24) {
            selectedFlightIcao = icao24;
            const flight = flightData.find(f => f[0] === icao24);
            if (flight) {
                let callsign = flight[1] ? flight[1].trim() : "N/A";
                let originCountry = flight[2] || "Bilinmiyor";
                let altitude = flight[7] || 0;
                let speed = flight[9] ? flight[9].toFixed(0) : "N/A";
                let vRate = flight[11] ? flight[11] : "N/A";

                const html = `
                    <h4>Uçuş Detayları</h4>
                    <p><b>Callsign:</b> ${callsign}</p>
                    <p><b>Kalkış (Ülke):</b> ${originCountry}</p>
                    <p><b>Rakım:</b> ${Math.round(altitude)} m</p>
                    <p><b>Hız:</b> ${speed} m/s</p>
                    <p><b>Dikey Hız:</b> ${vRate} m/s</p>
                    <button onclick="hideFlightDetails()" class="btn btn-sm btn-secondary">Kapat</button>
                `;
                flightDetailsPanel.innerHTML = html;
                flightDetailsPanel.style.display = 'block';
            }
        }

        function hideFlightDetails() {
            flightDetailsPanel.style.display = 'none';
            selectedFlightIcao = null;
        }


        /***************************************************/
        /** 6) RADAR ANIMATION (Canvas Sweep)             **/
        /***************************************************/
        function drawRadar() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Outer circle
            ctx.strokeStyle = 'rgba(0, 255, 0, 0.7)';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(centerX, centerY, radarRadius, 0, 2 * Math.PI);
            ctx.stroke();

            // Inner rings
            ctx.strokeStyle = 'rgba(0, 255, 255, 0.5)';
            const numRings = 3;
            for (let i = 1; i <= numRings; i++) {
                ctx.beginPath();
                ctx.arc(centerX, centerY, radarRadius * (i/numRings), 0, 2 * Math.PI);
                ctx.stroke();
            }

            // Main sweep line
            ctx.strokeStyle = 'rgba(0, 255, 0, 0.9)';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.lineTo(
                centerX + radarRadius * Math.cos(sweepAngle),
                centerY + radarRadius * Math.sin(sweepAngle)
            );
            ctx.stroke();

            // Extra lines for "sweep effect"
            ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';
            for (let i = 0; i < 15; i++) {
                ctx.beginPath();
                let angleOffset = i * (2 * Math.PI) / 45;
                ctx.moveTo(centerX, centerY);
                ctx.lineTo(
                    centerX + radarRadius * Math.cos(sweepAngle + angleOffset),
                    centerY + radarRadius * Math.sin(sweepAngle + angleOffset)
                );
                ctx.stroke();
            }

            // Move the sweep angle
            sweepAngle += 0.02;
            if (sweepAngle > 2 * Math.PI) {
                sweepAngle = 0;
            }

            // Adjust each marker's opacity based on the sweep angle
            let beamWidth = 0.2; // radians
            for (let key in planeMarkers) {
                let marker = planeMarkers[key];
                // Depending on your Leaflet version:
                let markerElement = (marker.getElement && marker.getElement()) || marker._icon;
                if (!markerElement) continue;

                // Convert lat/lng to screen coords
                let latLng = marker.getLatLng();
                let pt = map.latLngToContainerPoint(latLng);

                let dx = pt.x - centerX;
                let dy = pt.y - centerY;
                let markerAngle = Math.atan2(dy, dx);
                if (markerAngle < 0) markerAngle += 2 * Math.PI;

                let diff = Math.abs(markerAngle - sweepAngle);
                if (diff > Math.PI) diff = 2 * Math.PI - diff;

                let opacity = (diff < beamWidth) ? 1 : 0.1;
                markerElement.style.opacity = opacity;
            }

            requestAnimationFrame(drawRadar);
        }


        /***************************************************/
        /** 7) START EVERYTHING                           **/
        /***************************************************/
        // Start data fetch and update loops
        getFlightData();
        setInterval(getFlightData, fetchInterval);

        // Kick off the radar sweep animation
        drawRadar();
    </script>
</body>
</html>
