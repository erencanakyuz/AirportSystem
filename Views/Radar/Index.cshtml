@{
    Layout = null;
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8">
    <title>İstanbul Havalimanı Uçuş Radarı</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            font-family: 'Arial', sans-serif; /* Daha okunaklı font */
            color: #e0e0e0; /* Genel metin rengi */
            background-color: #121212; /* Daha koyu arka plan */
        }

        #mapContainer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 1;
        }

        #radarCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2;
            pointer-events: none;
        }

        #loadingIndicator {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(0, 0, 0, 0.5);
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            z-index: 3;
        }

        .flight-details-panel {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 15px;
            border-radius: 5px;
            z-index: 3;
            width: 300px;
            max-height: 80%;
            overflow-y: auto;
        }

            .flight-details-panel h4 {
                margin-top: 0;
                color: #00bcd4;
            }

            .flight-details-panel p {
                margin-bottom: 8px;
                line-height: 1.4;
            }

        .leaflet-marker-icon {
            transition: opacity 0.15s ease-out; /* Opaklık geçiş efekti */
        }
    </style>
</head>
<body>
    <div id="mapContainer"></div>
    <canvas id="radarCanvas"></canvas>
    <div id="loadingIndicator">Veri Yükleniyor...</div>
    <div id="flightDetails" class="flight-details-panel" style="display:none;"></div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        // Canvas ve radar ayarları
        const canvas = document.getElementById('radarCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radarRadius = Math.min(centerX, centerY) * 0.8;
        let sweepAngle = 0;
        let frameCount = 0;

        // Uçuş verileri ve yenileme aralığı
        let flightData = null;
        let lastFetchTime = 0;
        const fetchInterval = 15000;
        let isFetchingData = false; // Veri çekme durumunu izlemek için

        // İstanbul Havalimanı koordinatları
        const istanbulLat = 41.275;
        const istanbulLon = 28.75;

        // Haritayı oluşturuyoruz
        let map = L.map('mapContainer', {
            center: [istanbulLat, istanbulLon],
            zoom: 9,
            zoomControl: true, // Zoom kontrolü eklendi
            attributionControl: false,
            dragging: true, // Harita sürükleme etkin
            doubleClickZoom: true, // Çift tıklama zoom etkin
            scrollWheelZoom: true, // Mouse tekerleği zoom etkin
            touchZoom: true, // Dokunmatik zoom etkin
            boxZoom: true,
            keyboard: true,
        });

        // Marker’lar için özel pane oluşturup z-index ayarı
        map.createPane('planeIconsPane');
        map.getPane('planeIconsPane').style.zIndex = 650;

        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors &copy; CartoDB'
        }).addTo(map);

        // Global nesneler: uçak marker’ları ve uçuş izleri
        let planeMarkers = {};      // icao24 => marker
        let flightPaths = {};       // icao24 => [ [lat, lng], ... ]
        let flightPathLayers = {};  // icao24 => polyline layer
        let selectedFlightIcao = null; // Seçili uçuşun icao kodu

        const loadingIndicator = document.getElementById('loadingIndicator');
        const flightDetailsPanel = document.getElementById('flightDetails');


        // API'den uçuş verilerini çekiyoruz
        function getFlightData() {
            const currentTime = Date.now();
            if (currentTime - lastFetchTime < fetchInterval || isFetchingData) {
                console.log("Veri çekme aralığı henüz dolmadı veya veri çekiliyor, atlanıyor.");
                return;
            }
            isFetchingData = true;
            loadingIndicator.style.display = 'block'; // Yükleme göstergesini göster
            lastFetchTime = currentTime;
            console.log("Gerçek uçuş verileri çekiliyor...");

            $.ajax({
                url: '@Url.Action("GetFlights", "Radar")',
                method: 'GET',
                success: function(data) {
                    isFetchingData = false;
                    loadingIndicator.style.display = 'none'; // Yükleme göstergesini gizle
                    console.log("Uçuş verileri alındı:", data);
                    if (data && data.states) { // Veri ve states kontrolü
                        flightData = data.states;
                        updateFlights();
                    } else {
                        console.error("API'den geçersiz veri formatı alındı:", data);
                        displayErrorMessage("Veri formatı hatası. Lütfen daha sonra tekrar deneyin.");
                    }
                },
                error: function(error) {
                    isFetchingData = false;
                    loadingIndicator.style.display = 'none'; // Yükleme göstergesini gizle
                    console.error("Uçuş verileri alınırken HATA:", error);
                    displayErrorMessage("Uçuş verileri alınamadı. Lütfen internet bağlantınızı kontrol edin ve sayfayı yenileyin.");
                }
            });
        }

        function displayErrorMessage(message) {
            loadingIndicator.textContent = "Hata: " + message;
            loadingIndicator.style.display = 'block';
            setTimeout(() => {
                loadingIndicator.style.display = 'none';
                loadingIndicator.textContent = "Veri Yükleniyor..."; // Gösterge metnini geri al
            }, 5000); // 5 saniye sonra hatayı temizle
        }

        // Uçuş verilerine göre marker ve uçuş izlerini güncelliyoruz
        function updateFlights() {
            if (!flightData) return;

            let currentFlightIcaos = {}; // Mevcut uçuşların icao kodları
            flightData.forEach(function(flight) {
                let icao24 = flight[0];
                currentFlightIcaos[icao24] = true;

                let callsign = flight[1] ? flight[1].trim() : "N/A";
                let longitude = flight[5];
                let latitude = flight[6];
                let altitude = flight[7];
                let heading = flight[10] || 0; // Uçuş yönü (derece); yoksa 0

                //if (longitude == null || latitude == null) return;

                // Uçuş izini güncelle (son 50 koordinat)
                if (!flightPaths[icao24]) {
                    flightPaths[icao24] = [];
                }
                flightPaths[icao24].push([latitude, longitude]);
                if (flightPaths[icao24].length > 50) {
                    flightPaths[icao24].shift();
                }

                // Uçuş izi layer'ını güncelle veya oluştur
                if (flightPathLayers[icao24]) {
                    flightPathLayers[icao24].setLatLngs(flightPaths[icao24]);
                } else {
                    flightPathLayers[icao24] = L.polyline(flightPaths[icao24], { color: 'yellow', weight: 1, opacity: 0.7 }).addTo(map);
                }

                // Uçak ikonunu oluştur veya güncelle
                if (planeMarkers[icao24]) {
                    // Marker zaten varsa pozisyonu ve yönü güncelle
                    planeMarkers[icao24].setLatLng([latitude, longitude]);
                    let icon = planeMarkers[icao24].options.icon;
                    icon.options.html = `<img src="/images/plane-icon.png" style="width:72px; height:72px; opacity:0.6; transform: rotate(${heading}deg);">`;
                    planeMarkers[icao24].setIcon(icon);
                    planeMarkers[icao24].off('click').on('click', (e) => showFlightDetails(icao24)); // Event listener'ı yeniden ekle
                    planeMarkers[icao24].unbindTooltip().bindTooltip(     // Tooltip'i yeniden tanımla
                        `<b>Uçuş: ${callsign}</b><br>Rakım: ${altitude}m`,
                        { permanent: false, direction: 'top', offset: [0, -10] }
                    );
                } else {
                    // Yeni marker oluştur
                    let planeIcon = L.divIcon({
                        className: 'plane-marker',
                        html: `<img src="/images/plane-icon.png" style="width:72px; height:72px; opacity:0.6; transform: rotate(${heading}deg);">`,
                        iconSize: [72, 72],
                        iconAnchor: [36, 36]
                    });

                    let marker = L.marker([latitude, longitude], { icon: planeIcon });
                    marker.bindTooltip(
                        `<b>Uçuş: ${callsign}</b><br>Rakım: ${altitude}m`,
                        { permanent: false, direction: 'top', offset: [0, -10] }
                    );
                    marker.addTo(map, 'planeIconsPane');
                    marker.on('click', (e) => showFlightDetails(icao24)); // Click event listener for flight details
                    planeMarkers[icao24] = marker;
                }
            });

            // Kaybolan uçak marker'larını ve izlerini kaldır
            for (let icao24 in planeMarkers) {
                if (!currentFlightIcaos[icao24]) {
                    map.removeLayer(planeMarkers[icao24]);
                    delete planeMarkers[icao24];
                    if (flightPathLayers[icao24]) {
                        map.removeLayer(flightPathLayers[icao24]);
                        delete flightPathLayers[icao24];
                    }
                    delete flightPaths[icao24];
                    if (selectedFlightIcao === icao24) {
                        hideFlightDetails(); // Seçili uçuş kaybolduysa paneli gizle
                    }
                }
            }
        }


        function showFlightDetails(icao24) {
            selectedFlightIcao = icao24;
            const flight = flightData.find(f => f[0] === icao24);
            if (flight) {
                const callsign = flight[1] ? flight[1].trim() : "N/A";
                const origin = flight[2] || "Bilinmiyor";
                const destination = flight[3] || "Bilinmiyor";
                const altitude = flight[7];
                const speed = flight[9] ? flight[9].toFixed(0) : "Bilinmiyor";
                const verticalRate = flight[11] || "Bilinmiyor";


                const detailsHTML = `
                    <h4>Uçuş Detayları</h4>
                    <p><b>Callsign:</b> ${callsign}</p>
                    <p><b>Kalkış:</b> ${origin}</p>
                    <p><b>Varış:</b> ${destination}</p>
                    <p><b>Rakım:</b> ${altitude} m</p>
                    <p><b>Hız:</b> ${speed} m/s</p>
                    <p><b>Dikey Hız:</b> ${verticalRate} m/s</p>
                    <button onclick="hideFlightDetails()" class="btn btn-sm btn-secondary">Kapat</button>
                `;
                flightDetailsPanel.innerHTML = detailsHTML;
                flightDetailsPanel.style.display = 'block';
            }
        }

        function hideFlightDetails() {
            flightDetailsPanel.style.display = 'none';
            selectedFlightIcao = null;
        }


        // Radar tarama animasyonu (canvas üzerinde çiziliyor) ve ikonların opaklığını ayarlıyoruz
        function drawRadar() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            // Arka planı şeffaf bırakıyoruz
            ctx.fillStyle = 'rgba(0, 0, 0, 0)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Radar sınır çemberi
            ctx.strokeStyle = 'rgba(0, 255, 0, 0.7)';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(centerX, centerY, radarRadius, 0, Math.PI * 2);
            ctx.stroke();

            // İç halkalar
            ctx.strokeStyle = 'rgba(0, 255, 255, 0.5)';
            let numCircles = 3;
            for (let i = 1; i <= numCircles; i++) {
                ctx.beginPath();
                ctx.arc(centerX, centerY, radarRadius * (i / numCircles), 0, Math.PI * 2);
                ctx.stroke();
            }

            // Radar ışını (sweep)
            ctx.strokeStyle = 'rgba(0, 255, 0, 0.9)';
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.lineTo(centerX + radarRadius * Math.cos(sweepAngle), centerY + radarRadius * Math.sin(sweepAngle));
            ctx.stroke();

            // Ekstra efekt çizgileri
            ctx.strokeStyle = 'rgba(0, 255, 0, 0.3)';
            for (let i = 0; i < 15; i++) {
                ctx.beginPath();
                let angleOffset = i * (2 * Math.PI) / 45;
                ctx.moveTo(centerX, centerY);
                ctx.lineTo(centerX + radarRadius * Math.cos(sweepAngle + angleOffset), centerY + radarRadius * Math.sin(sweepAngle + angleOffset));
                ctx.stroke();
            }

            // Radar ışını sürekli dönüyor
            sweepAngle += 0.02;
            if (sweepAngle > 2 * Math.PI) {
                sweepAngle = 0;
            }

            // --- Radar ışını ikonlara değdiğinde opaklıklarını güncelliyoruz ---
            // Marker’ların başlangıç opaklığı 0.6; radar ışını değdiğinde 1, diğer durumlarda 0.
            let beamWidth = 0.2; // Radyan cinsinden ışın genişliği (gerekirse ayarlayın)
            for (let key in planeMarkers) {
                let marker = planeMarkers[key];
                let markerElement = marker.getElement() || marker._icon;
                if (!markerElement) continue;

                let markerLatLng = marker.getLatLng();
                let containerPoint = map.latLngToContainerPoint(markerLatLng);
                let dx = containerPoint.x - centerX;
                let dy = containerPoint.y - centerY;
                let markerAngle = Math.atan2(dy, dx);
                if (markerAngle < 0) markerAngle += 2 * Math.PI;
                let diff = Math.abs(markerAngle - sweepAngle);
                if (diff > Math.PI) diff = 2 * Math.PI - diff;
                // Opaklık geçişi için 0 ile 1 arasında yumuşak bir değer hesapla
                let opacityValue = (diff < beamWidth) ? 1 : 0.1; // Işın üzerindeyse 1, değilse 0.1
                markerElement.style.opacity = opacityValue;
            }

            frameCount++;
            requestAnimationFrame(drawRadar);
        }


        // Veri çekme ve radar animasyonunu başlatıyoruz
        getFlightData(); // İlk veri çekme hemen başlasın
        updateFlights(); // İlk yüklemede uçaklar güncellensin, markerlar hemen oluşsun
        setInterval(getFlightData, fetchInterval);
        drawRadar();
    </script>
</body>
</html>