```cshtml
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Creative Airport Status Dashboard</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">

    <style>
        /* Tüm Stilleri Buraya Kopyala - Güncellenmiş Stiller */
        /* Gelişmiş Stiller (öncekiyle aynı, eklemelerle) */
        body {
            background: linear-gradient(135deg, #0f172a 0%, #334155 100%);
            color: #ffffff;
            font-family: 'Roboto', sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            justify-content: flex-start;
        }

        .dashboard-container {
            padding: 2rem 1rem;
            padding-top: 4rem;
            max-width: 1200px;
            margin: auto;
            width: 100%;
        }

        /* Başlık Bölümü */
        .dashboard-header {
            text-align: center;
            margin-bottom: 2.5rem;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }

        .airport-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            letter-spacing: -1px;
        }

        .airport-subtitle {
            font-size: 1.1rem;
            color: rgba(255, 255, 255, 0.7);
            font-style: italic;
            margin-bottom: 1rem;
        }

        .refresh-button {
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.15);
            border-radius: 0.5rem;
            color: #fff;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            margin-top: 1rem;
        }

            .refresh-button:hover {
                background-color: rgba(255, 255, 255, 0.2);
            }

        .card {
            background-color: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1rem;
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.3);
            color: #fff;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            overflow: hidden;
        }

            .card:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 16px rgba(0, 0, 0, 0.4);
            }

        .card-header {
            background-color: rgba(255, 255, 255, 0.1);
            border-bottom: 1px solid rgba(255, 255, 255, 0.15);
            font-size: 1.3rem;
            padding: 1rem 1.25rem;
            border-radius: 1rem 1rem 0 0;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .card-header i {
                margin-right: 0.5rem;
                font-size: 1.4rem;
                vertical-align: middle;
            }

        .card-body {
            font-size: 1rem;
            padding: 1.25rem;
            text-align: center;
        }

        .status-text {
            font-size: 1.3rem;
            margin-bottom: 0.75rem;
            font-weight: 500;
        }

        .heading {
            font-size: 1.6rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }

        .fade-in {
            opacity: 0;
            animation: fadeIn 1s forwards ease-out;
        }

        @@keyframes fadeIn {
            to {
                opacity: 1;
            }
        }

        .text-highlight {
            color: #ffbb33;
            font-weight: 600;
        }

        .temp-text {
            font-size: 2.5rem;
            font-weight: 700;
            line-height: 1;
        }

        .units {
            font-size: 0.9rem;
            margin-left: 0.3rem;
            color: rgba(255, 255, 255, 0.8);
            vertical-align: top;
            position: relative;
            top: 0.4rem;
        }

        hr.border-light {
            border-top: 1px dashed rgba(255, 255, 255, 0.2);
            margin: 1rem auto;
            width: 70%;
        }

        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .airport-title {
                font-size: 2rem;
            }

            .airport-subtitle {
                font-size: 1rem;
            }

            .card-header {
                font-size: 1.1rem;
            }

            .status-text {
                font-size: 1.1rem;
            }

            .temp-text {
                font-size: 2rem;
            }
        }

        .gateWaitTime-green {
            color: #a8f0da;
        }

        .gateWaitTime-orange {
            color: #fdd835;
        }

        .gateWaitTime-red {
            color: #ef5350;
        }

        .wait-time-icon {
            margin-right: 0.5rem;
            vertical-align: middle;
            font-size: 1.2rem;
        }
            /* Yeni İkon Stilleri */
            .wait-time-icon.terminal {
                color: #66fcf1; /* Terminal giriş için farklı bir renk */
            }

            .wait-time-icon.passport {
                color: #c2b280; /* Pasaport kontrol için farklı bir renk */
            }

            .wait-time-icon.domestic {
                color: #a2d9ff; /* İç hatlar için farklı bir renk */
            }


        /* Yeni Checkpoint Section Stilleri */
        .checkpoint-section {
            padding: 20px 0;
        }

        .checkpoint-title {
            font-size: 2rem;
            color: #fff;
            text-align: center;
            margin-bottom: 30px;
        }

        .checkpoint-item {
            background-color: rgba(255, 255, 255, 0.08);
            backdrop-filter: blur(5px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 1rem;
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.3);
            padding: 20px;
            margin-bottom: 15px;
            transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
            display: flex;
            flex-direction: column; /* Dikey düzen */
            align-items: stretch; /* İçeriği yatayda gerdir */
            text-align: center; /* Metni merkezde hizala */
        }

            .checkpoint-item:hover {
                transform: translateY(-5px);
                box-shadow: 0 12px 16px rgba(0, 0, 0, 0.4);
            }

            .checkpoint-item .status {
                width: 100px;
                height: 30px;
                line-height: 30px;
                border-radius: 15px;
                text-align: center;
                color: #fff;
                margin-bottom: 10px;
                font-size: 0.9rem;
                text-transform: uppercase;
                align-self: center; /* Status'ü yatayda merkezileştir */
            }

                .checkpoint-item .status.green {
                    background-color: #4CAF50; /* Yeşil */
                }

                .checkpoint-item .status.yellow {
                    background-color: #FFC107; /* Sarı */
                }

                .checkpoint-item .status.red {
                    background-color: #F44336; /* Kırmızı */
                }

            .checkpoint-item .title {
                font-size: 1.4rem;
                font-weight: 500;
                color: #fff;
                margin-bottom: 10px; /* Başlık ile açıklama arası boşluk */
                align-self: center; /* Başlığı yatayda merkezileştir */
            }

        .checkpoint-card-title {
            font-size: 1.2rem;
            margin-bottom: 5px;
            font-weight: bold;
            color: #fff; /* Başlık rengi */
            text-align: center; /* Başlığı ortala */
        }


        .checkpoint-item .footer {
            display: flex;
            flex-direction: column; /* Dikey düzen */
            align-items: center; /* İçeriği merkezileştir */
            width: 100%;
        }

            .checkpoint-item .footer .timer {
                text-align: center; /* Timer metnini merkezileştir */
                margin-bottom: 10px; /* Timer ile ikon arası boşluk */
            }


                .checkpoint-item .footer .timer .desc {
                    font-size: 0.9rem;
                    color: rgba(255, 255, 255, 0.7);
                    display: block;
                    margin-bottom: 2px; /* Açıklama ile süre arası boşluk */
                }

                .checkpoint-item .footer .timer .time {
                    font-size: 1.5rem;
                    font-weight: 700;
                    color: #fff;
                    display: block;
                }

            .checkpoint-item .footer .icon {
                font-size: 2.5rem; /* İkon boyutunu ayarla */
                color: #fff; /* İkon rengini ayarla */
                display: flex;
                align-items: center;
                justify-content: center;
                align-self: center; /* İkonu yatayda merkezileştir */
            }

                .checkpoint-item .footer .icon span {
                    display: inline-block;
                }

                /* Özel ikon sınıfları - Bootstrap Icons yerine kendi ikonlarınızı kullanıyorsanız */
                .checkpoint-item .footer .icon .icon-terminal::before {
                    content: '\f6e3'; /* Örnek Bootstrap icon kodu - door-open-fill */
                    font-family: 'bootstrap-icons'; /* Bootstrap ikon font ailesi */
                    color: #66fcf1; /* Terminal icon rengi */
                    font-size: 2.5rem;
                }

                .checkpoint-item .footer .icon .icon-passport::before {
                    content: '\f62d'; /* Örnek Bootstrap icon kodu - passport-fill */
                    font-family: 'bootstrap-icons'; /* Bootstrap ikon font ailesi */
                    color: #c2b280; /* Pasaport icon rengi */
                    font-size: 2.5rem;
                }

                .checkpoint-item .footer .icon .icon-domestic-flight::before {
                    content: '\f2fd'; /* Örnek Bootstrap icon kodu - shield-lock-fill */
                    font-family: 'bootstrap-icons'; /* Bootstrap ikon font ailesi */
                    color: #a2d9ff; /* İç hatlar icon rengi */
                    font-size: 2.5rem;
                }
    </style>
</head>
<body>
    <div class="dashboard-container fade-in">
        <header class="dashboard-header">
            <h1 class="airport-title">Istanbul Airport Status Dashboard</h1>
            <p class="airport-subtitle">Real-time Delays and Weather Conditions</p>
            <button id="refreshButton" class="refresh-button">
                <i class="bi bi-arrow-clockwise"></i> Verileri Güncelle
            </button>
        </header>

        <div class="row g-4">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header text-center">
                        <i class="bi bi-airplane-fill"></i> Gecikme Bilgileri
                    </div>
                    <div class="card-body text-center">
                        <p class="status-text mb-2" id="delayStatusText">Gecikme Yükleniyor...</p>
                        <hr class="border-light" />
                        <p class="mb-1">
                            <i class="bi bi-graph-up-arrow"></i> Gecikme Skoru:
                            <span class="text-highlight" id="delayScore">--</span>
                        </p>
                        <p class="mb-1">
                            <i class="bi bi-activity"></i> Trend:
                            <span class="text-highlight" id="delayTrend">--</span>
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header text-center">
                        <i class="bi bi-cloud-sun-fill"></i> Anlık Hava Durumu
                    </div>
                    <div class="card-body text-center">
                        <p class="status-text" id="sky">Hava Durumu Yükleniyor...</p>
                        <hr class="border-light" />
                        <p class="temp-text d-inline" id="tempF">--°F</p>
                        <span class="units" id="tempC">( --°C )</span>
                        <hr class="border-light" />
                        <p>
                            <i class="bi bi-eye-fill"></i> Görüş Mesafesi:
                            <span class="text-highlight" id="visibilityMiles">--</span> mil
                        </p>
                        <p>
                            <i class="bi bi-wind"></i> Rüzgar:
                            <span class="text-highlight" id="windKnots">--</span>
                            <span class="units">kts</span>
                            (
                            <span class="text-highlight" id="windDir">N/A</span>
                            )
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <section class="checkpoint-section" id="waitingTimesSection">
            <div class="container">
                <div class="row row-gap-15">
                    <div class="col-12">
                        <h2 class="checkpoint-title">Canlı Bekleme Süreleri</h2>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkpoint-item">
                            <h3 class="checkpoint-card-title">Terminal Giriş Kontrol Noktası</h3>
                            <div class="status green" id="terminal-status">Anlık</div>
                            <div class="title">
                                Terminal Giriş Kontrol Noktası
                            </div>
                            <div class="footer">
                                <div class="timer">
                                    <span class="desc" id="terminal-time-name">En yoğun giriş ( Kapı 7 )</span>
                                    <span class="time gateWaitTime-green" id="terminal-time-class"><span id="terminal-time">1</span> Dakika</span>
                                </div>
                                <div class="icon">
                                    <span class="icon-terminal"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="checkpoint-item">
                            <h3 class="checkpoint-card-title">Pasaport Kontrol Bekleme Noktası</h3>
                            <div class="status yellow" id="passport-status">Anlık</div>
                            <div class="title">
                                Pasaport Kontrol Bekleme Noktası
                            </div>
                            <div class="footer">
                                <div class="timer">
                                    <span class="desc" id="passport-time-name">En yoğun giriş ( Giriş 1 )</span>
                                    <span class="time gateWaitTime-yellow" id="passport-time-class"><span id="passport-time">13</span> Dakika</span>
                                </div>
                                <div class="icon">
                                    <span class="icon-passport"></span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-lg-4">
                        <div class="checkpoint-item">
                            <h3 class="checkpoint-card-title">İç Hatlar Kontrol Bekleme Noktası</h3>
                            <div class="status green" id="domestic-status">Anlık</div>
                            <div class="title">
                                İç Hatlar Kontrol Bekleme Noktası
                            </div>
                            <div class="footer">
                                <div class="timer">
                                    <span class="desc" id="domestic-time-name">En yoğun giriş ( Giriş 1 )</span>
                                    <span class="time gateWaitTime-green" id="domestic-time-class"><span id="domestic-time">2</span> Dakika</span>
                                </div>
                                <div class="icon">
                                    <span class="icon-domestic-flight"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <script>
            // Gecikme & Hava Durumu - JavaScript kodu aynı kalabilir
            async function fetchAirportStatus() {
                try {
                    const response = await fetch('http://localhost:5000/api/airport-status');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    console.log("FlightStats data:", data);

                    // Gecikme Endeksi
                    if (data.delayIndex) {
                        const status = data.delayIndex.status || "Bilinmiyor";
                        const trend = data.delayIndex.trend || "Trend Yok";
                        const score = data.delayIndex.score ?? "--";

                        document.getElementById('delayStatusText').textContent = `${status.toUpperCase()} HAVALİMANI GECİKMESİ`;
                        document.getElementById('delayScore').textContent = score;
                        document.getElementById('delayTrend').textContent = trend;
                    } else {
                        document.getElementById('delayStatusText').textContent = "Gecikme Verisi Yok";
                    }

                    // Anlık Hava Durumu
                    if (data.currentWeather) {
                        const tempF = data.currentWeather.tempF ?? "--";
                        const tempC = data.currentWeather.tempC ?? "--";
                        const sky = data.currentWeather.sky || "Veri Yok";
                        const direction = data.currentWeather.direction ?? "N/A";
                        const visibility = data.currentWeather.visibility ? data.currentWeather.visibility.miles : "--";

                        document.getElementById('tempF').textContent = `${tempF}°F`;
                        document.getElementById('tempC').textContent = `(${tempC}°C)`;
                        document.getElementById('sky').textContent = sky;
                        document.getElementById('visibilityMiles').textContent = visibility;

                        if (data.currentWeather.wind) {
                            document.getElementById('windKnots').textContent = data.currentWeather.wind.knots ?? "--";
                        }
                        document.getElementById('windDir').textContent = direction;
                    } else {
                        document.getElementById('sky').textContent = "Hava Durumu Verisi Yok";
                    }
                } catch (error) {
                    console.error('Veri çekme hatası:', error);
                    document.getElementById('delayStatusText').textContent = "Veri yükleme hatası.";
                    document.getElementById('sky').textContent = "Veri yükleme hatası.";
                }
            }

            // Bekleme Süreleri - JavaScript kodu aynı kalabilir
            async function fetchWaitingTimes() {
                try {
                    const response = await fetch('http://localhost:5000/api/waiting-times');
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    console.log("Bekleme Süreleri verisi:", data);

                    if (data && data.result) {
                        document.getElementById('waitingTimeStatus').textContent = "Güncellendi!";
                        const waitingTimes = data.result;

                        // Terminal Giriş Kontrol Noktası
                        if (waitingTimes.TerminalGirisWaitTime !== undefined) {
                            document.getElementById('terminal-time').textContent = waitingTimes.TerminalGirisWaitTime;
                            document.getElementById('terminal-time-name').textContent = waitingTimes.TerminalGirisWaitTimeName || 'En yoğun giriş (Kapı 7)'; // Varsayılan isim
                            document.getElementById('terminal-status').className = `status ${waitingTimes.TerminalGirisWaitTimeClassName || 'green'}`;
                        } else {
                            document.getElementById('terminal-time').textContent = '--';
                            document.getElementById('terminal-time-name').textContent = 'Veri Yok';
                            document.getElementById('terminal-status').className = 'status red'; // Hata durumunda kırmızı status
                        }

                        // Pasaport Kontrol Bekleme Noktası
                        if (waitingTimes.PassQueueWaitTime !== undefined) {
                            document.getElementById('passport-time').textContent = waitingTimes.PassQueueWaitTime;
                            document.getElementById('passport-time-name').textContent = waitingTimes.PassQueueWaitTimeName || 'En yoğun giriş (Giriş 1)'; // Varsayılan isim
                            document.getElementById('passport-status').className = `status ${waitingTimes.PassQueueWaitTimeClassName || 'yellow'}`; // Status class dinamik yapma
                        } else {
                            document.getElementById('passport-time').textContent = '--';
                            document.getElementById('passport-time-name').textContent = 'Veri Yok';
                            document.getElementById('passport-status').className = 'status red'; // Hata durumunda kırmızı status
                        }

                        // İç Hatlar Kontrol Bekleme Noktası
                        if (waitingTimes.DomQueueWaitTime !== undefined) {
                            document.getElementById('domestic-time').textContent = waitingTimes.DomQueueWaitTime;
                            document.getElementById('domestic-time-name').textContent = waitingTimes.DomQueueWaitTimeName || 'En yoğun giriş (Giriş 1)'; // Varsayılan isim
                            document.getElementById('domestic-status').className = `status ${waitingTimes.DomQueueWaitTimeClassName || 'green'}`; // Status class dinamik yapma
                        } else {
                            document.getElementById('domestic-time').textContent = '--';
                            document.getElementById('domestic-time-name').textContent = 'Veri Yok';
                            document.getElementById('domestic-status').className = 'status red'; // Hata durumunda kırmızı status
                        }


                    } else {
                        document.getElementById('waitingTimeStatus').textContent = "Bekleme süresi verisi yok.";
                        document.getElementById('terminal-time').textContent = '--';
                        document.getElementById('terminal-time-name').textContent = 'Veri Yok';
                        document.getElementById('passport-time').textContent = '--';
                        document.getElementById('passport-time-name').textContent = 'Veri Yok';
                        document.getElementById('domestic-time').textContent = '--';
                        document.getElementById('domestic-time-name').textContent = 'Veri Yok';
                    }
                } catch (error) {
                    console.error('Bekleme süreleri çekme hatası:', error);
                    document.getElementById('waitingTimeStatus').textContent = "Bekleme süreleri yükleme hatası.";
                    document.getElementById('terminal-time').textContent = 'Hata';
                    document.getElementById('terminal-time-name').textContent = 'Hata';
                    document.getElementById('passport-time').textContent = 'Hata';
                    document.getElementById('passport-time-name').textContent = 'Hata';
                    document.getElementById('domestic-time').textContent = 'Hata';
                    document.getElementById('domestic-time-name').textContent = 'Hata';
                }
            }

            document.addEventListener('DOMContentLoaded', function () {
                // İlk yüklemede her iki veriyi de çek
                fetchAirportStatus();
                fetchWaitingTimes();

                // Yenile butonu tıklanınca tekrar çek
                const refreshButton = document.getElementById('refreshButton');
                refreshButton.addEventListener('click', () => {
                    fetchAirportStatus();
                    fetchWaitingTimes();
                });
            });
        </script>
    </div>
</body>
</html>
```